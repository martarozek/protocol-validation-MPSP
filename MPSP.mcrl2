sort SH = struct h_outer | h_middle | h_initial;
sort SV = struct v_lowest | v_below | v_mid | v_above | v_upper;
sort DH = struct inwards | outwards; 
sort DV = struct up | down;
sort BTN = struct b_up | b_down | b_stop | b_reset | b_resume | b_undock; 

act
  s_horizontal:  SH;
  cs_horizontal: SH;
  s_vertical:    SV;
  cs_vertical:   SV;
  m_vertical:    DV;
  cm_vertical:   DV;
  m_horizontal:  DH;
  cm_horizontal: DH;
  m_vertical_stop, m_horizontal_stop;
  cm_vertical_stop, cm_horizontal_stop;
  b_vertical, ub_vertical, b_horizontal, ub_horizontal;
  cb_vertical, cub_vertical, cb_horizontal, cub_horizontal;
  s_dock, s_undock, s_nop;
  cs_dock, cs_undock, cs_nop;
  but_press, but_release:     BTN;
  d_undock, cd_undock;
  calibrate, uncalibrate;

  sense_horizontal: SH;
  sense_vertical:   SV;
  move_horizontal:  DH;
  move_vertical:    DV;
  sense_dock, sense_undock, undock, nop;
  motor_vertical_stop, motor_horizontal_stop;
  brake_vertical, unbrake_vertical, brake_horizontal, unbrake_horizontal;
  emergency, unemergency;

proc
  S = ((sum h:SH. s_horizontal(h)) + (sum v:SV. s_vertical(v)) + s_dock + s_undock + s_nop).S;
  
  MV = (sum d:DV. m_vertical(d)).m_vertical_stop.MV;
  MH = (sum d:DH. m_horizontal(d)).m_horizontal_stop.MH;

  D = d_undock.D;

  BV = ub_vertical.b_vertical.BV;
  BH = ub_horizontal.b_horizontal.BH;

  MOVE_VERTICAL(direction: DV) = (direction == up) ->but_press(b_up).START_MOVING_VERTICAL(v_upper, b_up, up) <> but_press(b_down).START_MOVING_VERTICAL(v_lowest, b_down, down);

  START_MOVING_VERTICAL(s_position: SV, button: BTN, direction: DV) = sum p:SV.(p != s_position) -> cs_vertical(p).cm_vertical(direction).cub_vertical.(AUTO_STOP_VERTICAL(s_position, button, direction) + MANUAL_STOP_VERTICAL(button))<> cs_vertical(p).but_release(button);

  MANUAL_STOP_VERTICAL(button: BTN) = but_release(button).cb_vertical.cm_vertical_stop;

  AUTO_STOP_VERTICAL(s_position: SV, button: BTN, direction: DV) = sum p:SV.(p == s_position) -> cs_vertical(s_position).cb_vertical.cm_vertical_stop.but_release(button) <> cs_vertical(p).(AUTO_STOP_VERTICAL(s_position, button, direction) + MANUAL_STOP_VERTICAL(button)) + cs_vertical(s_position).cb_vertical.cm_vertical_stop.but_release(button);



  MOVE_HORIZONTAL(direction: DH) = (direction == inwards) ->but_press(b_up).START_MOVING_HORIZONTAL(h_outer, b_up, inwards) <> but_press(b_down).START_MOVING_HORIZONTAL(h_initial, b_down, outwards);

  START_MOVING_HORIZONTAL(s_position: SH, button: BTN, direction: DH) = sum p:SH.(p != s_position) -> cs_horizontal(p).cm_horizontal(direction).cub_horizontal.(AUTO_STOP_HORIZONTAL(s_position, button, direction) + MANUAL_STOP_HORIZONTAL(button)) <> cs_horizontal(p).but_release(button);

  MANUAL_STOP_HORIZONTAL(button: BTN) = but_release(button).cb_horizontal.cm_horizontal_stop;

  AUTO_STOP_HORIZONTAL(s_position: SH, button: BTN, direction: DH) = sum p:SH.(p == s_position) -> cs_horizontal(s_position).cb_horizontal.cm_horizontal_stop.but_release(button) <> cs_horizontal(p).(AUTO_STOP_HORIZONTAL(s_position, button, direction) + MANUAL_STOP_HORIZONTAL(button)) + cs_horizontal(s_position).cb_horizontal.cm_horizontal_stop.but_release(button);



  D_UNC = (MOVE_VERTICAL(up) + MOVE_VERTICAL(down)).D_UNC + but_press(b_reset).but_release(b_reset).calibrate.D_CAL;

  D_CAL = UNDOCK+ MOVE_WHILE_DOCKED.D_CAL + EMERGENCY;

  UNCALIBRATE = but_press(b_reset).but_release(b_reset).uncalibrate.UND_UNC;

  EMERGENCY = but_press(b_stop).but_release(b_stop).emergency.cub_horizontal.but_press(b_resume).but_release(b_resume).unemergency.cb_horizontal.D_CAL;

  UNDOCK = but_press(b_undock).but_release(b_undock).sum p:SH.(p == h_initial) -> cs_horizontal(h_initial).cd_undock.UND_CAL <> cs_horizontal(p).D_CAL;

  MOVE_WHILE_DOCKED = but_press(b_up).sum p: SV.(p == v_mid) -> cs_vertical(v_mid).START_MOVING_HORIZONTAL(h_outer, b_up, inwards) <> ((p == v_below || p == v_lowest)-> cs_vertical(p).START_MOVING_VERTICAL(v_mid, b_up, up) <> cs_vertical(p).but_release(b_up))
  +
  but_press(b_down).sum p: SV.(p == v_mid) -> 
  cs_vertical(v_mid).(sum hp: SH. (hp != h_initial)->
    START_MOVING_HORIZONTAL(h_initial, b_down, outwards) 
    <> cs_horizontal(h_initial).START_MOVING_VERTICAL(v_lowest, b_down, down)) 
  <> (
    (p == v_upper || p == v_above)-> cs_vertical(p).START_MOVING_VERTICAL(v_mid, b_down, down) 
    <> cs_vertical(p).but_release(b_down)
  )
  ;

  UND_CAL = (cs_dock.sum p: SV. (p == v_upper || p == v_above) -> cs_vertical(p).cd_undock. UND_CAL <> cs_vertical(p).D_CAL) + (MOVE_VERTICAL(up) + MOVE_VERTICAL(down)).UND_CAL + UNCALIBRATE;

  UND_UNC = (MOVE_VERTICAL(up) + MOVE_VERTICAL(down)).UND_UNC + (cs_dock.sum p: SV. (p == v_upper || p == v_above) -> cs_vertical(p).cd_undock. UND_UNC <> cs_vertical(p).D_UNC);

  init hide({s_horizontal, s_vertical, m_vertical, m_horizontal, m_vertical_stop, m_horizontal_stop, b_vertical, ub_vertical, b_horizontal, ub_horizontal, s_dock, s_undock, s_nop, cs_horizontal, cs_vertical, cm_vertical, cm_horizontal, cm_vertical_stop, cm_horizontal_stop, cb_vertical, cub_vertical, cb_horizontal, cub_horizontal, cs_dock, cs_undock, cs_nop, d_undock, cd_undock},
  allow({
  sense_horizontal,
  sense_vertical,
  move_horizontal,
  move_vertical,
  sense_dock, sense_undock, undock, nop,
  motor_vertical_stop, motor_horizontal_stop,
  brake_vertical, unbrake_vertical, brake_horizontal, unbrake_horizontal,
  but_press, but_release,
  calibrate, uncalibrate,
  emergency, unemergency
  },
  comm({
  s_horizontal|cs_horizontal->sense_horizontal,
  s_vertical|cs_vertical->sense_vertical,
  m_horizontal|cm_horizontal->move_horizontal,
  m_vertical|cm_vertical->move_vertical,
  s_dock|cs_dock->sense_dock,
  s_undock|cs_undock->sense_undock,
  s_nop|cs_nop->nop,
  m_vertical_stop|cm_vertical_stop->motor_vertical_stop,
  m_horizontal_stop|cm_horizontal_stop->motor_horizontal_stop,
  b_vertical|cb_vertical->brake_vertical,
  ub_vertical|cub_vertical -> unbrake_vertical,
  b_horizontal|cb_horizontal->brake_horizontal,
  ub_horizontal|cub_horizontal -> unbrake_horizontal,
  d_undock| cd_undock -> undock
   },
  UND_UNC || BV || BH || MV || MH || S || D)));
